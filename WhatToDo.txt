Anything and everything can be found in the EVERYTHING/BAGEL folders.
Things.js

To simulate,
npm start
i - for iphone
a - dor android

INITIAL -
npm install -g expo-cli

START -
npm start

INSTALLS - 
npm install
npm install firebase
sudo npm install -g firebase-tools
npm install @react-navigation/native
npx expo install react-native-screens react-native-safe-area-context
npm install react-native-screens react-native-safe-area-context
npm install @react-navigation/native-stack
npm i react-native-vector-icons
npx expo install expo-notifications expo-device expo-constants
npm i @react-native-async-storage/async-storage
npx expo install expo-image-picker
npx expo install expo-camera
npx expo install expo-location
npx expo install react-native-maps
npx expo install expo-checkbox
npx expo install expo-av
npx expo install expo-asset
npm install expo-linking
npx expo install @react-native-community/datetimepicker
npm install stripe --save
npx expo install expo-blur
npx expo install expo-mail-composer
expo install expo-linear-gradient
npx expo install expo-file-system
npx expo install expo-document-picker
npm install react-native-file-viewer
npm install react-native-draggable-flatlist
npx expo install react-native-pager-view
sudo npm install algoliasearch react-instantsearch
npm install react-native-qrcode-svg
npm install ngeohash
npm install react-native-nfc-manager
npx expo install expo-dev-client
npm install tesseract.js@latest
npm install expo-image-manipulator
npm install axios

SYNTAX -
------ JSX
<Text>
  Put stuff here
</Text>

<View style={[insert styles here]}>
  Other components here
</View>

<Image source={require("./EVERYTHING/PHOTOS/icon.png")} />

------ STYLES
layout.separate_horizontal
format.center_text
colors.white
sizes.small_text
backgrounds.black

------ FUNCTIONS
function functionName() {
  // Do something here
  console.log("You just ran a function!")
}
functionName()

------ VARIABLES
const variableName = "variable value";

------ STATE
const [state, setState] = useState("Initial Value")
setState("New Value")
-----

------ ASYNC
.then(() => {
  // Do stuff once the function is finished. This only applies to async functions.
})
------

PLUGINS -
ImagePicker -----
"expo": {
    "plugins": [
        [
        "expo-image-picker",
        {
            "photosPermission": "The app accesses your photos to let you share them with your friends."
        }
        ]
    ]
}
-----
Camera -----
"expo": {
    "plugins": [
      [
        "expo-camera",
        {
          "cameraPermission": "Allow $(PRODUCT_NAME) to access your camera."
        }
      ]
    ]
  }
-----
Location -----
"expo": {
    "plugins": [
      [
        "expo-location",
        {
          "locationAlwaysAndWhenInUsePermission": "Allow $(PRODUCT_NAME) to use your location."
        }
      ]
    ]
  }
-----
Document Picker -----
"expo": {
    "plugins": [
      [
        "expo-document-picker",
        {
          "iCloudContainerEnvironment": "Production"
        }
      ]
    ]
  }
-----

VARIABLES -
height, width
c_projectID
c_googleMapsAPI
me, myID, myToken

LAYOUT -
SafeArea -> { statusBar, loading, children, styles }
SafeArea -> { statusBar, loading, children, backgroundColor, styles }
SplitView -> { children, leftSize, rightSize, styles }
Grid -> { columns, children, styles }
FadeWrapper -> { children, seconds }
Spacer -> { height }
Loading -> { }
RoundedCorners -> { children, topRight, topLeft, bottomRight, bottomLeft, styles }
PulsingView -> { children, speed } 
BlurWrapper -> { intensity, tint, children, styles }
SlideWrapper -> { mainContent, mainContentBackground, sideContent, sideContentBackground, height }
ShowMoreView -> { height, children }
TimedView -> { seconds, children }
GradientView -> { colors, children }
MenuBar -> { options, iconSize, color, backgroundColor, padding, radius, navigation, route, styles }
CSVtoJSONConverterView()
ImageBackground -> { image, blurIntensity }

CONTROLS -
Example:
<ButtonOne backgroundColor={"#ff0000"} radius={15} onPress={functionName} styles={[layout.padding]}>
  <Text style={[format.center_text, sizes.medium_text, colors.white]}>Press Me</Text>
</ButtonOne>

ButtonOne -> { children, backgroundColor, radius, padding, width, onPress, styles }
ButtonTwo -> { children, borderWidth, borderColor, radius, padding, onPress, styles }
SelectedButton -> { children, func, color, backgroundColor, selectedBackgroundColor, styles }
IconButtonOne -> { name, size, padding, background, color, onPress, styles }
IconButtonTwo -> {name, size, color, onPress, styles}
IconButtonThree -> { name, size, color, borderColor, radius, padding, onPress, styles }
TextIconButton -> { text, textSize, icon, iconSize, backgroundColor, radius, paddingH, paddingV, onPress }
Icon -> { name, size, color, styles }
LinkOne -> { children, underlineColor, onPress, styles }
TextFieldOne -> { placeholder, textSize, onTyping, value, styles }
    const [thing, setThing] = useState("");
    function onTypeThing(text) {
        setThing(text);
    }
TextFieldOne -> { placeholder, backgroundColor, borderBottomWidth, borderBottomColor, paddingH, paddingV, textSize, radius, onTyping, isPassword, autoCap, isNum, value, styles }
  const [thing, setThing] = useState("");
  function onTypeThing(text) {
      setThing(text);
  }
DropdownOne -> { options, radius, value, setter }
CheckboxOne -> { value, setter, text }
SegmentedPicker -> { options, value, setter, backgroundColor }
SegmentedPickerTwo -> { options, value, setter, borderBottomColor, selectedColor, color }
IconSegmentedPicker -> { icons, backgroundColor, radius, setter, value }
Accordion -> { children, top }
CameraPicker -> { setToggle, setLoading, setImage }
AsyncImage -> { path, width, height, radius }
Map -> { coords, delta, height, radius, scrollEnabled }
LocalNotification -> { icon, title, message, color, setToggle, seconds }
AudioPlayer -> { audioName, audioPath }
VideoPlayer -> { videoPath, radius }
DateTime ->{ date, time, setDate, setTime }
PaymentView -> { children, showPayButton, total, successFunc }
- amount must be greater than $0.50 usd
TimerView -> { isActive, setSeconds, seconds, textSize, styles }
BarGraphView -> { stats, barWidth, barRadius, graphHeight, showValue = true, showHeading = true, textSize }
ProgressBar -> { progress, radius, color, backgroundColor, height, limit }
ImagesView -> { images, styles, onPageSelected }
NotificationCircle -> { text, textSize, color, children }
SliderView -> { func, padding, icon, text }
NumberPad -> { setter, value, text }

BASIC FUNCTIONS -
randomString(length)
filterArr(array, property, value)
filterArrayMultiple(array, filters)
reduceArray(array, property)
removeDuplicates(array)
removeDuplicatesByProperty(array, property)
formatDate(date)
formatLongDate(date)
formatDateTime(date)
compareDates(date1, date2)
checkDate(date1, date2)
getDistanceInMiles(coords1, coords2)
getDistanceInKilometers(coords1, coords2)

FUNCTIONS -
function_PickImage(setLoading, setImage)
function_GetLocation(setLoading, setLocation)
function_NotificationsSetup()
sendPushNotificationHandler(token, title, body)
function_GetDirections(lat, lon)
function_AddressToLatLon(address, setter)
function_SendEmail(toEmails, subject, HTML)
function_AsyncString(asyncFunction, setter)
function_PlaySound(audio)
function_TimedFunction(func, timesPerMinute)
function_OpenPDF(pdfURL)

STYLES - 
layout ->
    padding,
    margin,
    horizontal, 
    vertical, 
    separate_horizontal, 
    separate_vertical, 
    relative, 
    absolute,
    bottom,
    full_height, 
    full_width, 
    fit_height,
    fit_width,
    center,
    align_top,
    align_bottom,
    image_cover,
    image_contain,
    image_fill,
    no_gap

format ->
    center_text, 
    right_text, 
    left_text, 
    bold,
    radius,
    radius_full,
    all_caps,
    strike,
    shadow

sizes ->
    xsmall_text, 
    small_text, 
    medium_text, 
    large_text, 
    xlarge_text, 
    xxlarge_text 

colors -> 
    white, 
    black,
    blue

backgrounds ->
    white, 
    black,
    shadow

FIREBASE -
// Get from Firebase Console
// https://console.firebase.google.com/u/0/
const firebaseConfig = {}

auth_IsUserSignedIn(setLoading, navigation, ifLoggedIn, ifNotLoggedIn, params)
auth_SignIn(setLoading, email, password, navigation, params, redirect)
auth_SignOut(setLoading, navigation, redirect)
auth_CreateUser(setLoading, email, password, args, navigation, params, redirect)
auth_ResetPassword(email)

firebase_CreateUser(args, uid)
firebase_GetDocument(setLoading, table, documentID, setter)
firebase_GetAllDocuments(setLoading, table, setter, limit, order, orderField, whereField, whereCondition, whereValue)
firebase_GetAllDocumentsListener(setLoading, table, setter, docLimit, order, orderField, whereField, whereCondition, whereValue, paginated = false, lastDoc = null, setLastDoc)
firebase_GetAllDocumentsListenerByDistance( setLoading, table, setter, docLimit, order, orderField, whereField, whereCondition, whereValue, paginated = false, lastDoc = null, setLastDoc, distance, coordinates )
firebase_CreateDocument(args, table, documentID)
firebase_UpdateDocument(setLoading, table, documentID, args)
firebase_DeleteDocument(setLoading, table, documentID)
firebase_UpdateToken(token)
storage_UploadImage(setLoading, image, path)